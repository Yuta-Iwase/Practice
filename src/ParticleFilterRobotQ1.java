import java.io.File;
import java.io.PrintWriter;


public class ParticleFilterRobotQ1 {
	static int tmax = 13;
	static double Lx=5.0,Ly=3.0; //部屋の大きさ
	static int N0=100;
	static int nxmax=(int)Lx*N0, nymax=(int)Ly*N0;
	static int s[][] = new int[nxmax+1][nymax+1]; //部屋をマスで分ける
	static int kmax=8; //方位の数
	static double d[] = new double[kmax]; //各方位での距離
	
	public ParticleFilterRobotQ1() {
		for(int i=1;i<nxmax;i++){
			for(int j=1;j<nymax;j++){
				s[i][j] = 0;
			}
		}
		for(int j=0;j<=nymax;j++){
			s[0][j] = 1;
		}
		for(int j=0;j<=nymax;j++){
			s[nxmax][j] = 1;
		}
		for(int i=1;i<nxmax;i++){
			s[i][0] = 1;
		}
		for(int i=1;i<nxmax;i++){
			s[i][nymax] = 1;
		}
	}
	
	
	
	public static void main(String[] args) throws Exception{
		new ParticleFilterRobotQ1();
		double data[][]={
				{0.13,0.18384776310850237,2.82,3.9880822458921283,2.87,3.0829855659733476,2.18,0.18384776310850237},
				{0.1,0.1414213562373095,3.02,4.1012193308819755,2.9,2.8001428534987287,1.98,0.1414213562373095},
				{0.1,0.1414213562373095,3.13,4.1012193308819755,2.9,2.644579361637688,1.87,0.1414213562373095},
				{0.49,0.6929646455628167,2.67,3.5496760415564688,2.51,3.295117600329312,2.33,0.6929646455628167},
				{0.77,1.0889444430272832,2.5,3.153696244092002,2.23,3.153696244092002,2.5,1.0889444430272832},
				{0.71,1.0040916292848976,2.78,3.238549057834388,2.29,3.139554108468271,2.22,1.0040916292848976},
				{0.36,0.5091168824543143,3.08,3.733523804664971,2.64,2.7152900397563426,1.92,0.5091168824543143},
				{0.64,0.9050966799187808,3.19,3.3375440072005045,2.36,2.5597265478953024,1.81,0.9050966799187808},
				{0.26,0.36769552621700474,2.89,3.8749451609022803,2.74,2.983990616607231,2.11,0.36769552621700474},
				{0.27,0.3818376618407357,2.55,3.6062445840513924,2.73,3.464823227814083,2.45,0.3818376618407357},
				{0.2,0.282842712474619,2.96,3.9597979746446663,2.8,2.884995667241114,2.04,0.282842712474619},
				{0.23,0.3252691193458119,3.19,3.9173715677734737,2.77,2.5597265478953024,1.81,0.3252691193458119},
				{0.34,0.4808326112068524,3.32,3.761808075912433,2.66,2.3758787847867997,1.68,0.4808326112068524},
				{0.1,0.1414213562373095,3.15,4.1012193308819755,2.9,2.616295090390226,1.85,0.1414213562373095},
				{0.1,0.1414213562373095,2.71,3.8325187540310877,2.9,3.238549057834388,2.29,0.1414213562373095},
				{0.1,0.1414213562373095,2.34,3.3092597359530425,2.9,3.761808075912433,2.66,0.1414213562373095},
				{0.1,0.1414213562373095,2.49,3.5213917703090067,2.9,3.5496760415564688,2.51,0.1414213562373095},
				{0.28,0.3959797974644666,2.5,3.5355339059327378,2.72,3.5355339059327378,2.5,0.3959797974644666},
				{0.61,0.862670273047588,2.67,3.379970414071697,2.39,3.295117600329312,2.33,0.862670273047588},
				{0.22,0.3111269837220809,2.64,3.733523804664971,2.78,3.3375440072005045,2.36,0.3111269837220809}};
		
		double dx[]={
				0.0,-0.20275670170412807,-0.10671999651114339,0.4590361052593619,0.16779271014679376,-0.2779359118690925,-0.30325147309329226,-0.10896194385672175,0.30369258681836264,0.3388580077409493,-0.4065387355086636,-0.23526472706368962,-0.13188282418631792,0.17026110562655417,0.445965059677238,0.3663178131171625,-0.14866957223285082,-0.015137812188873223,-0.16795911295716692,0.036993801308131236};
		
		double dy[]={
				0.0,0.03288123946458121,0.0,-0.3860873603920907,-0.27996509675960723,0.05813698977018866,0.3453204335535234,-0.27334229536744337,0.3792863143784153,-0.015818707051558967,0.0697481929033188,-0.03029084161138318,-0.10456552513701611,0.2375778957136534,0.0,0.0,0.0,-0.18452070440576263,-0.3285870959930062,0.3946538933204611};
		
		PrintWriter aa = new PrintWriter("Robot12Q1.dat");
		aa.println(data[11][6] + "\t" + data[11][4]);
		aa.close();
		
		int nmax = 100;

		double x[] = new double[nmax];
		double y[] = new double[nmax];
		for(int n=0;n<nmax;n++){
			x[n] = (Lx-0.2)*Math.random()+0.1;
			y[n] = (Ly-0.2)*Math.random()+0.1;
		}
		
		double vx,vy;
		double a=1.0,s=0.25;
		double as=a*s;
		double r1,r2;
		final double pi = Math.PI;
		double[] xp = new double[nmax];
		double[] yp = new double[nmax];
		double error;
		double[] w = new double[nmax];
		double sum;
		int np;
		int j,jmax;
		int N;
		double R;
		int l;
		String fileName = "robotposition" + (tmax-1) + "Q1.dat";
		PrintWriter pw  = new PrintWriter(new File(fileName));
		for(int t=0;t<tmax;t++){
			sum = 0.0;
			for(int n=0;n<nmax;n++){
				r1=Math.random();
				r2=Math.random();
				vx = as * Math.sqrt(-2*Math.log(r1)) * Math.cos(2*pi*r2);
				r1=Math.random();
				r2=Math.random();
				vy = as * Math.sqrt(-2*Math.log(r1)) * Math.cos(2*pi*r2);
				
				xp[n] = x[n]+dx[t]+vx;
				if(xp[n]<0.1)xp[n]=0.1;
				else if(xp[n]>Lx-0.1) xp[n]=Lx-0.1;
				yp[n] = y[n]+dy[t]+vy;
				if(yp[n]<0.1)yp[n]=0.1;
				else if(yp[n]>Ly-0.1) yp[n]=Ly-0.1;
				
				distance(xp[n],yp[n]);
				error=0.0;
				for(int k=0;k<kmax;k++){
					error += (data[t][k]-d[k])*(data[t][k]-d[k]);
				}
				w[n] = Math.exp(-error/(2*s*s)) / Math.sqrt(2*pi*s*s);
				sum += w[n];
			}
			for(int n=0;n<nmax;n++) w[n] /= sum;
			
			np=0;
			sum=0.0;
			j=0;
			N = nmax;
			for(int n=0;n<nmax;n++){
				np = (int)(w[n]*nmax);
				jmax = j+np;
				N -= np;
				w[n] -= np/(double)nmax;
				sum += w[n];
				for(int k=j;k<jmax;k++){
					x[k] = xp[n];
					y[k] = yp[n];
				}
				j = jmax;
			}
			R = N + Math.random();
			for(int n=0;n<nmax;n++) w[n] *= N/sum;
			j=N;
			for(int n=0;n<nmax;n++){
				R -= w[n];
				l = (int)R;
				if(j!=l){
					x[nmax-N]=xp[n];
					y[nmax-N]=yp[n];
					N--;
				}
				j=l;
			}
		}
		
		for(int n=0;n<nmax;n++) pw.println(x[n] + "\t" + y[n]);
		System.out.println("ファイル名「" + fileName + "」を出力しました");
		pw.close();
	}
	


	private static void distance(double x,double y){
		int i,j,nx,ny,nstep;
		final int[] di = { 0, 1, 1, 1, 0,-1,-1,-1};
		final int[] dj = { 1, 1, 0,-1,-1,-1, 0, 1};
		double[] ud ={1.0,Math.sqrt(2)};
		nx=(int)(x*N0+0.5);
		ny=(int)(y*N0+0.5);
		for(int k=0;k<kmax;k++){
			i=nx;
			j=ny;
			nstep=0;
			while(s[i][j]==0){
				i += di[k];
				j += dj[k];
				nstep++;
			}
			d[k] = nstep*ud[k%2]/N0;
//			if(d[k]>1.5) d[k] = 1.5;//(robotQ2.datの場合)	
		}	
	}
	
	
}
